ch 1 - Strategy

Strategy: defines a family of algorithms (quack and fly), encapsulates each one,
and makes them interchangeable (classes implement interfaces). Strategy lets the algorithm
vary independently from the clients that use it (duck subclasses).

Identify the aspects of your application that vary and separate them from what stays the same
program to an interface, not an implementation
Favor composition over inheritance (Duck delegates quack and fly behavior to interfaces)

ch 2 - Observer

Observer: Defines a one-to-many dependency between objects so that when one object changes state,
all its dependents are notified and updated automatically.

Strive for loosely coupled designs for objects that interact

Swing uses observers: JButton - button.addActionListener(new ActionListener);

ch 3 - Decorator

Decorator: Attaches additional responsibilities to an object dynamically. Decorators provide
a flexible alternative to subclassing for extending functionality.

Classes should be open for extension, but closed for modifications

Java I/O uses many decorators: FileInputStream(new BufferedInputStream(new LineNumberInputStream("file.txt")));

ch 4 - Factory

Factory Method: Defines an interface for creating an object, but lets subclasses decide which
class to instantiate. Factory Method lets a class defer instantiation to subclasses.

Depend upon abstractions. Do not depend upon concrete classes.

Abstract Factory: provides an interface for creating families of related or dependent objects
without specifying their concrete classes.

ch 5 - Singleton

Singleton: Ensures a class has only one instance, and provides a global point of access to it.

ch 6 - Command

Command: encapsulates a request as an object, thereby letting you parameterize other objects with
different requests, queue or log requests, and support undoable operations.

ch 7 - Adapter

Adapter: converts the interface of a class into another interface the clients expect. Adapter lets
classes work together that couldn't otherwise because of the incompatible interfaces.

ch 7 - Facade

Facade: provides a unified interface to a set of interfaces in a subsystem. Facade defines a
higher-level interface that makes the subsystem easier to use.

Principle of Least Knowledge: talk only to your immediate friends.

For an object, only invoke methods that belong to: The object itself, Objects passed in as a
parameter, any object that is created or instantiated, any component (instance var) of the object

ch 8 - Template

Template: defines the skeleton of an algorithm in a method, deferring some steps to subclasses.
Template Method lets the subclasses redefine certain steps of al algorithm without changing the
algorithm's structure.

Don't call us, we'll call you. Low-level components can hook themselves into a system, but the
high-level components determine when they are needed.

Arrays.sort() is a variation of the Template pattern. It requires a class to implement the
Comparable interface, and have a compareTo method that provides the algorithm on how to compare
the objects.

JFrame has a hook method paint(). It does nothing by default, and can be used to incorporate a
graphic on the screen.

ch 9 - Iterator

Iterator: provides a way to access the elements of an aggregate object sequentially without
exposing its underlying representation.

ch 9 - Composite

Composite: allows you to compose objects into tree structures to represent part-whole hierarchies.
Composite lets clients treat individual objects and compositions of objects uniformly.

Special Case: Null object design pattern.

A class should have only one reason to change.












